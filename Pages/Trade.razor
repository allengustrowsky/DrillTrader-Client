@page "/trade"
@*@layout PrimaryLayout*@
@inject HttpClient Http
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@using client.Data
@using System.Threading
@inject IDialogService DialogService
@*@inject Microsoft.AspNetCore.Components.ComponentBase ComponentBase*@


<MudText Typo="Typo.h2" Align="Align.Center">Assets</MudText>

@if (!UserState.is_logged_in)
{
    <NotAuthenticatedCard />
}
else
{
    if (LoadDataErrorMessage != "")
    {
        <MudContainer MaxWidth="MaxWidth.Large" style="margin-top: 70px;">
            <MudCard xs="10" sm="6" Elevation="0">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Error" xs="10" sm="6" style="text-align: center;" @bind-value="LoadDataErrorMessage">@LoadDataErrorMessage</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </MudContainer>
    }

    @*Cash*@
    <MudText Typo="Typo.h4" class="mt-16">Cash</MudText>
    <MudGrid class="mt-3">
        @foreach (var assetItem in PriceData.Data)
        {
            if (assetItem.Value.assetType == "Cash")
            {
                <MudItem Width="250px" Height="250px">
                    <MudPaper>
                        <MudCard Width="250px" Height="" Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <div style="width: 100%; display: flex; justify-content: space-between;">
                                        <MudText Typo="Typo.h5" Color="Color.Secondary">@assetItem.Value.name</MudText>
                                        <MudIcon Icon="@Icons.Material.Outlined.Balance" Title="@assetItem.Value.name" />
                                    </div>
                                </CardHeaderContent>
                            </MudCardHeader>

                            @*<MudCardContent>
                                <MudText Typo="Typo.body1" Color="Color.Primary">Your cash:</MudText>
                                <MudText Typo="Typo.body1" Color="Color.Primary" @bind-value="@userCashAvailable">$@userCashAvailable</MudText>
                            </MudCardContent>*@
                            <MudCardActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenCashDialog(false, "Withdraw", @assetItem.Value, @assetItem.Key))">Withdraw</MudButton>
                                <MudSpacer />
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenCashDialog(true, "Deposit", @assetItem.Value, @assetItem.Key))">Deposit</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
        }

    </MudGrid>

    @*Cryptocurrency*@
    <MudText Typo="Typo.h4" class="mt-16">Cryptocurrency</MudText>
    <MudGrid class="mt-3">
        @foreach (var assetItem in PriceData.Data)
        {
            if (assetItem.Value.assetType == "Cryptocurrency")
            {
                <MudItem Width="280px" Height="250px">
                    <MudPaper>
                        <MudCard Width="280px" Height="" Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <div style="width: 100%; display: flex; justify-content: space-between;">
                                        <MudText Typo="Typo.h5" Color="Color.Secondary">@assetItem.Key</MudText>
                                        <MudIcon Icon="@Icons.Filled.CurrencyBitcoin" Title="@assetItem.Value.name" />
                                    </div>
                                </CardHeaderContent>
                            </MudCardHeader>

                            <MudCardContent>
                                <MudText Typo="Typo.h4" Color="Color.Primary">$@assetItem.Value.currentPrice</MudText>
                                <MudText Typo="Typo.body2">@assetItem.Value.name</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(true, message, @assetItem.Value, @assetItem.Key, @assetItem.Value.currentPrice))">Buy</MudButton>
                                <MudSpacer />
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(false, message, @assetItem.Value, @assetItem.Key, @assetItem.Value.currentPrice))">Sell</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>


    @*Index Funds*@
    <MudText Typo="Typo.h4" class="mt-16">Index Funds</MudText>
    <MudGrid class="mt-3">
        @foreach (var assetItem in PriceData.Data)
        {
            if (assetItem.Value.assetType == "Index Fund")
            {
                <MudItem Width="280px" Height="250px">
                    <MudPaper>
                        <MudCard Width="280px" Height="" Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <div style="width: 100%; display: flex; justify-content: space-between;">
                                        <MudText Typo="Typo.h5" Color="Color.Secondary">@assetItem.Key</MudText>
                                        <MudIcon Icon="@Icons.Filled.StackedBarChart" Title="@assetItem.Value.name" />
                                    </div>
                                </CardHeaderContent>
                            </MudCardHeader>

                            <MudCardContent>
                                <MudText Typo="Typo.h4" Color="Color.Primary">$@assetItem.Value.currentPrice</MudText>
                                <MudText Typo="Typo.body2">@assetItem.Value.name</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(true, message, @assetItem.Value, @assetItem.Key, @assetItem.Value.currentPrice))">Buy</MudButton>
                                <MudSpacer />
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(false, message, @assetItem.Value, @assetItem.Key, @assetItem.Value.currentPrice))">Sell</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>

    @*Stocks*@
    <MudText Typo="Typo.h4" class="mt-16">Stocks</MudText>
    <MudGrid class="mt-3">
        @foreach (var assetItem in PriceData.Data)
        {
            if (assetItem.Value.assetType == "Stock")
            {
                <MudItem Width="280px" Height="250px">
                    <MudPaper>
                        <MudCard Width="280px" Height="" Elevation="3">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <div style="width: 100%; display: flex; justify-content: space-between;">
                                        <MudText Typo="Typo.h5" Color="Color.Secondary">@assetItem.Key</MudText>
                                        @*<MudSpacer />*@
                                        <MudIcon Icon="@Icons.Outlined.Assessment" Title="@assetItem.Value.name" />
                                    </div>
                                </CardHeaderContent>
                            </MudCardHeader>

                            <MudCardContent>
                                @*add hr?*@
                                <MudText Typo="Typo.h4" Color="Color.Primary">$@assetItem.Value.currentPrice</MudText>
                                <MudText Typo="Typo.body2">@assetItem.Value.name</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(true, message, @assetItem.Value, @assetItem.Key, @assetItem.Value.currentPrice))">Buy</MudButton>
                                <MudSpacer />
                                <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(false, message, @assetItem.Value, @assetItem.Key, @assetItem.Value.currentPrice))">Sell</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>
}

@code {
    string message = "hi";
    string LoadDataErrorMessage = "";
    private System.Threading.Timer poller;
    private double userCashAvailable = 0;
    //[CascadingParameter(Name = "PollingToggleParam")] protected bool PollingToggleParam { get; set; } = true;

    @*Adapted from https://mudblazor.com/components/dialog#usage *@
    private void OpenTransactDialog(bool IsBuy, string DialogTitle, AssetPriceData AssetData, string Symbol, double CurrentPrice)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("IsBuy", IsBuy);
        parameters.Add("AssetData", AssetData);
        parameters.Add("Symbol", Symbol);
        parameters.Add("CurrentPrice", CurrentPrice);

        string IntroTitle;
        if (IsBuy)
        {
            IntroTitle = "Buy ";
        } else
        {
            IntroTitle = "Sell ";
        }
        DialogService.Show<TransactDialog>(IntroTitle + DialogTitle, parameters, options);
    }

    private void OpenCashDialog(bool IsDeposit, string DialogTitle, AssetPriceData AssetData, string Symbol)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("IsDeposit", IsDeposit);
        parameters.Add("AssetData", AssetData);
        parameters.Add("Symbol", Symbol);
        //parameters.Add()

        DialogService.Show<CashDialog>(DialogTitle + " Cash", parameters, options);
    }

    //private void StartPolling()
    //{
    //    poller = new Timer(async (state) =>
    //    {
    //        await getData(state);
    //    }, null, 50, 1000);
    //    //getData(null);
    //}

    //private async void getData(Object state)
    //private async Task getData(object state)
    public async Task getData()
    {
        //await Task.Run(async () =>
        //{
        Console.WriteLine("it runnnnsss!!!");
        if (UserState.is_logged_in)
        {
            // get price data
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + "price-data")
            };
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response = await Http.SendAsync(requestMessage);
            try
            {
                response.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response.Content.ReadAsStringAsync();
                var responseInfo = JObject.Parse(responseInfoString);
                // store price data in state
                if (PriceData.Data.Count > 0) // avoid overwriting price data that's already in state
                {
                    Console.WriteLine("state already initialized, modifying");
                    foreach (var asset in responseInfo)
                    {
                        Console.WriteLine($"before: {asset.Key} ${PriceData.Data[asset.Key].currentPrice}");
                        PriceData.Data[asset.Key].currentPrice = (double)asset.Value["currentPrice"];
                        Console.WriteLine($"after: {asset.Key} ${PriceData.Data[asset.Key].currentPrice}");
                    }
                }
                else // price state is empty, so initialize it
                {
                    Console.WriteLine("initializing state...");
                    foreach (var asset in responseInfo)
                    {
                        AssetPriceData assetData = new AssetPriceData();
                        assetData.name = (string)asset.Value["name"];
                        assetData.currentPrice = (double)asset.Value["currentPrice"];
                        assetData.time = (long)asset.Value["time"];
                        assetData.assetType = (string)asset.Value["assetType"];
                        PriceData.Data.Add((string)asset.Key, assetData);
                    }
                }


                LoadDataErrorMessage = "";
            }
            catch (HttpRequestException exc)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", exc.Message);
                LoadDataErrorMessage = "An error occrred. Unable to load price data.";

            }
        }
        //PollingToggleParam = !PollingToggleParam;
        //ComponentBase.StateHasChanged();
        //StateHasChanged();
        //});
    }




    //protected override async Task OnInitializedAsync()
    //protected override async Task OnParametersSetAsync()
    //{
    //    Console.WriteLine("onparamasync");
    //    //StartPolling();
    //    //poller = new Timer(StartPolling, null, 50, 1000);
    //    //poller = new Timer(1000); // poll for data every second
    //    //poller.Elapsed += await getData(poller);
    //    //poller.AutoReset = true;
    //    //poller.Enabled = true;
    //    await getData();
    //}

    protected override async Task OnInitializedAsync()
    {
        //poller = new System.Threading.Timer(getData, null, 50, 1000);
        //OnParameters

        //////////////////////////////////////////////////////////////////////
        //////////////// Get user cash amount available //////////////////////
        //////////////////////////////////////////////////////////////////////
        // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
        // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
        var requestMessage2 = new HttpRequestMessage()
        {
            Method = new HttpMethod("GET"),
            RequestUri = new Uri(Http.BaseAddress.ToString() + $"portfolio-asset/symbol/{UserState.portfolio}/$")
        };
        requestMessage2.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
        var response2 = await Http.SendAsync(requestMessage2);
        try
        {
            response2.EnsureSuccessStatusCode(); // exception if not success code
            string responseInfoString = await response2.Content.ReadAsStringAsync();
            Console.WriteLine($"response: {responseInfoString}");
            var responseInfo = JObject.Parse(responseInfoString);
            userCashAvailable = (double)responseInfo["units"];
            //AssetId = (int)responseInfo["asset"]["id"];
        }
        catch (HttpRequestException exc)
        {
            //READ ERRORS: THANKS CHATGPT
            using (var streamReader = new StreamReader(await response2.Content.ReadAsStreamAsync()))
            {
                string responseContent = await streamReader.ReadToEndAsync();
                Console.WriteLine(responseContent);
            }
            Console.WriteLine("message :{0} ", exc.Message);

        }
        await getData();
    }

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();

    //    poller = new System.Threading.Timer(getData, null, 50, 1000);
    //}

    public void Dispose()
    {
        poller.Dispose();
    }

}
