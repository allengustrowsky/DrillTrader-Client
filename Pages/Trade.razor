@page "/trade"
@*@layout PrimaryLayout*@
@inject HttpClient Http
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@using client.Data
@inject IDialogService DialogService


<MudText Typo="Typo.h2" Align="Align.Center">Assets</MudText>

@if (!UserState.is_logged_in)
{
    <NotAuthenticatedCard />
}
else
{
    if (LoadPriceDataErrorMessage != "")
    {
        <MudContainer MaxWidth="MaxWidth.Large" style="margin-top: 70px;">
            <MudCard xs="10" sm="6" Elevation="0">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" xs="10" sm="6" style="text-align: center;" @bind-value="LoadPriceDataErrorMessage">@LoadPriceDataErrorMessage</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </MudContainer>
    }

    @*Cash*@
    <MudText Typo="Typo.h4" class="mt-16">Cash</MudText>
    <MudGrid class="mt-3">
        <MudItem Width="250px" Height="250px">
            <MudPaper>
                <MudCard Width="250px" Height="" Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div style="width: 100%; display: flex; justify-content: space-between;">
                                <MudText Typo="Typo.h5" Color="Color.Secondary">Cash</MudText>
                                <MudIcon Icon="@Icons.Material.Outlined.Balance" Title="Cash" />
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudText Typo="Typo.h4" Color="Color.Primary">$13602.42</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenCashDialog(false, "Withdraw"))">Withdraw</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenCashDialog(true, "Deposit"))">Deposit</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudPaper>
        </MudItem>
    </MudGrid>

    @*Cryptocurrency*@
    <MudText Typo="Typo.h4" class="mt-16">Cryptocurrency</MudText>
    <MudGrid class="mt-3">
        <MudItem Width="250px" Height="250px">
            <MudPaper>
                <MudCard Width="250px" Height="" Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div style="width: 100%; display: flex; justify-content: space-between;">
                                <MudText Typo="Typo.h5" Color="Color.Secondary">JPM</MudText>
                                <MudIcon Icon="@Icons.Filled.CurrencyBitcoin" Title="Cash" />
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudText Typo="Typo.h4" Color="Color.Primary">$13602.42</MudText>
                        <MudText Typo="Typo.body2">JPMorgan Chase & Co.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(true, message))">Buy</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(false, message))">Sell</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudPaper>
        </MudItem>
    </MudGrid>


    @*Index Funds*@
    <MudText Typo="Typo.h4" class="mt-16">Index Funds</MudText>
    <MudGrid class="mt-3">
        <MudItem Width="250px" Height="250px">
            <MudPaper>
                <MudCard Width="250px" Height="" Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div style="width: 100%; display: flex; justify-content: space-between;">
                                <MudText Typo="Typo.h5" Color="Color.Secondary">JPM</MudText>
                                <MudIcon Icon="@Icons.Filled.StackedBarChart" Title="Cash" />
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudText Typo="Typo.h4" Color="Color.Primary">$136.07</MudText>
                        <MudText Typo="Typo.body2">JPMorgan Chase & Co.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(true, message))">Buy</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(false, message))">Sell</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudPaper>
        </MudItem>
    </MudGrid>

    @*Stocks*@
    <MudText Typo="Typo.h4" class="mt-16">Stocks</MudText>
    <MudGrid class="mt-3">
        <MudItem Width="250px" Height="250px">
            <MudPaper>
                <MudCard Width="250px" Height="" Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div style="width: 100%; display: flex; justify-content: space-between;">
                                <MudText Typo="Typo.h5" Color="Color.Secondary">JPM</MudText>
                                @*<MudSpacer />*@
                                <MudIcon Icon="@Icons.Outlined.Assessment" Title="Cash" />
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>

                    <MudCardContent>
                        @*add hr?*@
                        <MudText Typo="Typo.h4" Color="Color.Primary">$136.07</MudText>
                        <MudText Typo="Typo.body2">JPMorgan Chase & Co.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(true, message))">Buy</MudButton>
                        <MudSpacer />
                        <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="@(() => OpenTransactDialog(false, message))">Sell</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    string message = "hi";
    string LoadPriceDataErrorMessage = "";

    @*Adapted from https://mudblazor.com/components/dialog#usage *@
    private void OpenTransactDialog(bool IsBuy, string DialogTitle)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("IsBuy", IsBuy);

        DialogService.Show<TransactDialog>("Sell " + DialogTitle, parameters, options);
    }

    private void OpenCashDialog(bool IsDeposit, string DialogTitle)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("IsDeposit", IsDeposit);

        DialogService.Show<CashDialog>(DialogTitle + " Cash", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("hello there -------------------------------------");
        if (UserState.is_logged_in)
        {
            // get price data
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + "price-data")
            };
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response = await Http.SendAsync(requestMessage);
            try
            {
                response.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response.Content.ReadAsStringAsync();
                var responseInfo = JObject.Parse(responseInfoString);
                // store price data in state
                foreach (var asset in responseInfo)
                {
                    AssetPriceData assetData = new AssetPriceData();
                    assetData.name = (string)asset.Value["name"];
                    assetData.currentPrice = (double)asset.Value["currentPrice"];
                    assetData.time = (long)asset.Value["time"];
                    assetData.assetType = (string)asset.Value["assetType"];
                    PriceData.Data.Add((string)asset.Key, assetData);
                }
                LoadPriceDataErrorMessage = "";
            }
            catch (HttpRequestException e)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", e.Message);
                LoadPriceDataErrorMessage = "An error occrred. Unable to load price data.";

            }
        }
        StateHasChanged();
        return;


    }

}

@*CURRENT: get data displayed adn do polling, then do transactions*@