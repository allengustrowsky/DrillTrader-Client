@page "/dashboard"
@*@layout PrimaryLayout*@
@using client.Data
@using System
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@inject HttpClient Http


<MudText Typo="Typo.h2" Align="Align.Center">Dashboard</MudText>

@if (!UserState.is_logged_in)
{
    <NotAuthenticatedCard />
}
else
{
    if (LoadPriceDataErrorMessage != "")
    {
        <MudContainer MaxWidth="MaxWidth.Large" style="margin-top: 70px;">
            <MudCard xs="10" sm="6" Elevation="0">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" Color="Color.Error" xs="10" sm="6" style="text-align: center;" @bind-value="LoadPriceDataErrorMessage">@LoadPriceDataErrorMessage</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>
        </MudContainer>
    }

<div style="width: 100%; display: flex; justify-content: center; flex-wrap: wrap; center; gap: 10%;">
    @*This div block adapted from https://mudblazor.com/components/linechart#basic-usage*@
    @*<div>
            <MudChart ChartType="ChartType.Line" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="450px" Height="450px"></MudChart>
        </div>*@
    @if (portfolioValueReady)
    {
        <PortfolioValueChart />
    }



    @*<MudChart ChartType="ChartType.Line" ChartSeries="@_series" XAxisLabels="@_xAxisLabels" ChartOptions="@_options" Width="100%" Height="350px"></MudChart>

        @code {
            private readonly List<ChartSeries> _series = new();
            private readonly ChartOptions _options = new();
            private readonly string[] _xAxisLabels = { "1986-04-20", "1986-04-21", "1986-04-22", "1986-04-23", "1986-04-24", "1986-04-25", "1986-04-26" };

            protected override void OnInitialized()
            {
                double[] data1 = { 65, 68, 70, 74, 74, 72, 74 };
                double[] data2 = { 88, 90, 91, 92, 91, 90, 90 };
                double[] data3 = { 89, 91, 92, 92, 92, 92, 91 };
                double[] data4 = { 85, 86, 90, 90, 92, 99, 0 };

                _series.Add(new ChartSeries { Name = "Chernobyl-1", Data = data1 });
                _series.Add(new ChartSeries { Name = "Chernobyl-2", Data = data2 });
                _series.Add(new ChartSeries { Name = "Chernobyl-3", Data = data3 });
                _series.Add(new ChartSeries { Name = "Chernobyl-4", Data = data4 });

                _options.YAxisTicks = 400;

                StateHasChanged();
            }
        }*@





    @if (portfolioAssetReady)
    {
        <PieChartAssetType />
        @*This div block adapted from https://mudblazor.com/components/piechart#basic-pie*@
        @*<MudPaper Class="pa-4">*@
        @*<div Class="pa-4">
                <MudChart ChartType="ChartType.Pie" InputData="@data" InputLabels="@labels" Width="300px" Height="300px" />
            </div>*@
        @*</MudPaper>*@
    }


    @*Breakdown*@

    @*Transactions*@
    @if (transactionsReady)
    {
        <RecentTransactionsGrid />

        @*This MudDataGrid adapted from https://mudblazor.com/components/datagrid#default-data-grid*@
        <!--<MudDataGrid Items="@Elements.Take(4)" Class="mt-12">
            <Columns>
                <PropertyColumn Property="x => x.Asset.Name" Title="Asset" />
                <PropertyColumn Property="x => x.Asset.AssetType" Title="Type" />
                <PropertyColumn Property="x => x.Asset.Symbol" Title="Symbol" />
                <PropertyColumn Property="x => x.Units" Title="Units" />
                <PropertyColumn Property="x => x.Ppu" Title="Price/Unit" />
                <PropertyColumn Property="x => x.IsBuy" Title="Type" />--> @*Buy/Sell*@
                <!--<PropertyColumn Property="x => x.CreatedAt" Title="Created At" />
            </Columns>
        </MudDataGrid>-->
    }

</div>
}

@code {
    private string LoadPriceDataErrorMessage = "";
    private bool portfolioValueReady = false;
    private bool portfolioAssetReady = false;
    private bool transactionsReady = false;
    //private double[] ChartData = new double[] {0};
    //private double[] ChartData = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 };
    //private List<double> ChartData = new List<double>();
    // Portfolio value chart
    // This code block adapted from https://mudblazor.com/components/linechart#basic-usage
    //public List<ChartSeries> Series = new List<ChartSeries>()
    //{
    //        new ChartSeries() { Name = "Portfolio Value", Data = new double[] { 0 } },
    //    };
    //public string[] XAxisLabels = { "" };

    // Pie chart for asset distribution
    // This code block adapted from https://mudblazor.com/components/piechart#basic-pie
    int dataSize = 4;
    //double[] data = { 77, 25, 20, 5 };
    //string[] labels = { "Cash", "Crypto", "Index Funds", "Stock" };

    // Breakdown of what assets are in each category


    // List of recent transactions
    // This code block adapted from https://mudblazor.com/components/datagrid#default-data-grid
    //private IEnumerable<Transaction> Elements = new List<Transaction>();


    private async Task getData()
    {
        if (UserState.is_logged_in)
        {
            //////////////////////////////////////////////////////////////////////
            //////////////// get portfolio value data for line chart //////////////
            /////////////////////////////////////////////////////////////////////////
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + $"portfolio-value/user/{UserState.id}")
            };
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response = await Http.SendAsync(requestMessage);
            try
            {
                response.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"response: {responseInfoString}");
                var responseInfo = JArray.Parse(responseInfoString);

                if (ChartDataList.Data.Count > 0) // reset line chart data stored in state if already exists to prevent duplicate stacking on page refresh
                {
                    ChartDataList.Data = new List<double>();
                }
                foreach (var portValue in responseInfo)
                {
                    ChartDataList.Data.Add((double)portValue["value"]);
                }

                if (ChartDataList.Labels.Count > 0)
                {
                    ChartDataList.Labels = new List<string>();
                }
                if (responseInfo.Count == 0) // handle no portfolio values
                {
                    ChartDataList.Labels.Add(DateTime.Now.ToString());
                } else
                {
                    ChartDataList.Labels.Add((string)responseInfo[0]["created_at"]);
                }

                LoadPriceDataErrorMessage = "";
                portfolioValueReady = true;
            }
            catch (HttpRequestException exc)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", exc.Message);
                LoadPriceDataErrorMessage = "An error occrred. Unable to load price data.";

            }

            //////////////////////////////////////////////////////////////////////
            ////////////// get asset type data for pie chart //////////////
            /////////////////////////////////////////////////////////////////////////
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            //if (PortfolioAssetTotal.Data.Count == 0)
            //{

            var requestMessage2 = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + "asset-type")
            };
            requestMessage2.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response2 = await Http.SendAsync(requestMessage2);
            try
            {
                response2.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response2.Content.ReadAsStringAsync();
                Console.WriteLine($"response: {responseInfoString}");
                var responseInfo = JArray.Parse(responseInfoString);
                if (PortfolioAssetTotal.Data.Count != 0)
                {
                    PortfolioAssetTotal.Data = new Dictionary<int, PortfolioAssetTotalDatum>();
                }
                foreach (var assetType in responseInfo)
                {
                    PortfolioAssetTotalDatum temp = new PortfolioAssetTotalDatum();
                    temp.name = (string)assetType["name"];
                    temp.value = 0;
                    PortfolioAssetTotal.Data.Add((int)assetType["id"], temp);
                    PortfolioAssetTotal.LabelList.Add((string)assetType["name"]);
                }
                portfolioAssetReady = true;
            }
            catch (HttpRequestException exc)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response2.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", exc.Message);
                LoadPriceDataErrorMessage = "An error occrred. Unable to load price data.";

            }
            //}

            //////////////////////////////////////////////////////////////////////
            ///////////////// get portfolio asset data for pie chart //////////////
            /////////////////////////////////////////////////////////////////////////
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            var requestMessage3 = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + $"portfolio-asset/user/{UserState.id}")
            };
            requestMessage3.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response3 = await Http.SendAsync(requestMessage3);
            try
            {
                response3.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response3.Content.ReadAsStringAsync();
                Console.WriteLine($"response: {responseInfoString}");
                var responseInfo = JArray.Parse(responseInfoString);
                // reset portValue counts
                foreach (var assetValue in PortfolioAssetTotal.Data)
                {
                    assetValue.Value.value = 0;
                }
                foreach (var portValue in responseInfo)
                {
                    // calculate value for each asset type
                    PortfolioAssetTotal.Data[(int)portValue["asset"]["asset_type"]].value += (double)portValue["units"] * PriceData.Data[(string)portValue["asset"]["ticker_symbol"]].currentPrice;
                }
                portfolioAssetReady = true;
            }
            catch (HttpRequestException exc)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response3.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", exc.Message);
                LoadPriceDataErrorMessage = "An error occrred. Unable to load price data.";

            }

            //////////////////////////////////////////////////////////////////////
            ///////////////// get recent transactions for data grid //////////////
            /////////////////////////////////////////////////////////////////////////
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            var requestMessage4 = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + $"transaction/{UserState.id}/10") // limit to 10 transactions
            };
            requestMessage4.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response4 = await Http.SendAsync(requestMessage4);
            try
            {
                response4.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response4.Content.ReadAsStringAsync();
                Console.WriteLine($"response: {responseInfoString}");
                var responseInfo = JArray.Parse(responseInfoString);
                //if ()
                // do refresh test
                if (client.Data.RecentTransactions.Data.Count > 0)
                {
                    client.Data.RecentTransactions.Data = new List<Transaction>();
                }

                foreach (var transaction in responseInfo)
                {
                    Console.WriteLine(transaction);
                    TransactionAsset temp = new TransactionAsset();
                    temp.id = (int)transaction["asset"]["id"];
                    temp.name = (string)transaction["asset"]["name"];
                    temp.ticker_symbol = (string)transaction["asset"]["ticker_symbol"];
                    temp.asset_type = (int)transaction["asset"]["asset_type"];
                    Transaction tempTrans = new Transaction();
                    tempTrans.id = (int)transaction["id"];
                    tempTrans.units = (double)transaction["id"];
                    tempTrans.price_per_unit = (double)transaction["price_per_unit"];
                    tempTrans.is_buy = (bool)transaction["is_buy"];
                    tempTrans.created_at = (DateTime)transaction["created_at"];
                    tempTrans.asset = temp;
                    tempTrans.portfolio = (int)transaction["portfolio"];
                    client.Data.RecentTransactions.Data.Add(tempTrans);
                    Console.WriteLine(transaction);
                }

                transactionsReady = true;
            }
            catch (HttpRequestException exc)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response4.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", exc.Message);
                LoadPriceDataErrorMessage = "An error occrred. Unable to load price data.";

            }
            StateHasChanged();
        }

    }

    public async Task getPriceData() // this has to run because the data may not be initialized yet
    {
        if (UserState.is_logged_in)
        {
            // get price data
            // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
            // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
            var requestMessage = new HttpRequestMessage()
            {
                Method = new HttpMethod("GET"),
                RequestUri = new Uri(Http.BaseAddress.ToString() + "price-data")
            };
            requestMessage.Headers.Authorization = new AuthenticationHeaderValue(UserState.apiKey);
            var response = await Http.SendAsync(requestMessage);
            try
            {
                response.EnsureSuccessStatusCode(); // exception if not success code
                string responseInfoString = await response.Content.ReadAsStringAsync();
                var responseInfo = JObject.Parse(responseInfoString);
                // store price data in state
                if (PriceData.Data.Count > 0) // avoid overwriting price data that's already in state
                {
                    Console.WriteLine("state already initialized, modifying");
                    foreach (var asset in responseInfo)
                    {
                        //Console.WriteLine($"before: {asset.Key} ${PriceData.Data[asset.Key].currentPrice}");
                        PriceData.Data[asset.Key].currentPrice = (double)asset.Value["currentPrice"];
                        //Console.WriteLine($"after: {asset.Key} ${PriceData.Data[asset.Key].currentPrice}");
                    }
                }
                else // price state is empty, so initialize it
                {
                    Console.WriteLine("initializing state...");
                    foreach (var asset in responseInfo)
                    {
                        AssetPriceData assetData = new AssetPriceData();
                        assetData.name = (string)asset.Value["name"];
                        assetData.currentPrice = (double)asset.Value["currentPrice"];
                        assetData.time = (long)asset.Value["time"];
                        assetData.assetType = (string)asset.Value["assetType"];
                        PriceData.Data.Add((string)asset.Key, assetData);
                    }
                }
                //LoadDataErrorMessage = "";
            }
            catch (HttpRequestException exc)
            {
                //READ ERRORS: THANKS CHATGPT
                using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
                {
                    string responseContent = await streamReader.ReadToEndAsync();
                    Console.WriteLine(responseContent);
                }
                Console.WriteLine("message :{0} ", exc.Message);
                //LoadDataErrorMessage = "An error occrred. Unable to load price data.";
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await getPriceData();
        await getData();
    }

    }
