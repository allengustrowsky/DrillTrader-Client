@page "/"
@using System.ComponentModel.DataAnnotations
@using client.Data
@using System.Text.Json
@using System.Text
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@inject HttpClient Http
@*Adapted from mublazor components library form example: https://mudblazor.com/components/form#editform-support *@
@if (UserState.is_logged_in)
{
    <UserInfoCard />
    <MudContainer MaxWidth="MaxWidth.Large" style="margin-top: 20px;">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" @onclick="LogOut">Log Out</MudButton>
    </MudContainer>
}
else if (showLogin)
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <EditForm Model="@loginForm" OnValidSubmit="OnValidLogIn" style="margin-top: 70px;">
            <DataAnnotationsValidator />
            <MudCard xs="10" sm="6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" xs="10" sm="6">Log in</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Api key" @bind-Value="loginForm.ApiKey" For="@(() => loginForm.ApiKey)" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Log in</MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="ToggleLoginView">Sign up</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small">
        <EditForm Model="@signUpModel" OnValidSubmit="OnValidSignUp" style="margin-top: 70px;">
            <DataAnnotationsValidator />
            <MudCard xs="10" sm="6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6" xs="10" sm="6">Sign up</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="First Name" @bind-Value="signUpModel.FirstName" For="@(() => signUpModel.FirstName)" />
                    <MudTextField Label="Last Name" @bind-Value="signUpModel.LastName" For="@(() => signUpModel.LastName)" />
                    <MudTextField Label="Email" @bind-Value="signUpModel.Email" For="@(() => signUpModel.Email)" />
                    <MudText @bind-Value="errorMessage" Typo="Typo.body2" Color="Color.Error">@errorMessage</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Sign up</MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="ToggleLoginView">Log in</MudButton>
                </MudCardActions>
            </MudCard>
        </EditForm>
    </MudContainer>
}


@code {
    // note: could use DefaultRequestHeaders for new apiKey when authenticated? or would that be a problem because everyone using the app would have that?
    private bool showLogin = true;
    private string errorMessage = "";
    // adapted from mudblazor documentation
    private void ToggleLoginView()
    {
        showLogin = !showLogin;
    }

    SignUpForm signUpModel = new SignUpForm();

    public class SignUpForm
    {
        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }

    private async Task signUp()
    {
        errorMessage = "";
        //count = count + 1;
        //Console.WriteLine("sign up");
        User user = new User { first_name = signUpModel.FirstName, last_name = signUpModel.LastName, email_address = signUpModel.Email };
        string userString = JsonSerializer.Serialize(user);
        //Console.WriteLine(user);
        //Console.WriteLine(JsonContent.Create(user).ToString());
        //var requestMessage = new HttpRequestMessage()
        //{
        //    Method = new HttpMethod("GET"),
        //    //RequestUri = new Uri(Http.BaseAddress.ToString() + "user"),
        //    RequestUri = new Uri("http://127.0.0.1:3000/"),
        //    //Content = JsonContent.Create(user)
        //};
        //var response = await Http.SendAsync(requestMessage);
        //var responseStatusCode = response.StatusCode;
        //Console.WriteLine(response);
        //Console.WriteLine(responseStatusCode);

        // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
        // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri(Http.BaseAddress.ToString() + "user"),
            Content = JsonContent.Create(user)
        };
        var response = await Http.SendAsync(requestMessage);
        try
        {
            response.EnsureSuccessStatusCode(); // exception if not success code
            string responseInfoString = await response.Content.ReadAsStringAsync();
            var responseInfo = JObject.Parse(responseInfoString);
            //string responseInfo = awat response.Content;
            Console.WriteLine(responseInfo);
            UserState.is_logged_in = true;
            UserState.id = (int)responseInfo["id"];
            UserState.first_name = (string)responseInfo["first_name"];
            UserState.last_name = (string)responseInfo["last_name"];
            UserState.email_address = (string)responseInfo["email_address"];
            UserState.apiKey = (string)responseInfo["apiKey"];
            UserState.is_admin = (bool)responseInfo["is_admin"];
            UserState.created_at = (DateTime)responseInfo["created_at"];
            UserState.portfolio = (int)responseInfo["portfolio"]["id"];
        }
        catch (HttpRequestException e)
        {
            //READ ERRORS: THANKS CHATGPT
            using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
            {
                string responseContent = await streamReader.ReadToEndAsync();
                errorMessage = JObject.Parse(responseContent)["message"].ToString();
            }
            Console.WriteLine("message :{0} ", e.Message);
        }

        //Content = new StringContent(userString, Encoding.UTF8, "application/json") // adapted from chatGpt

        Console.WriteLine(user);
        //var response = await Http.SendAsync(requestMessage);
        //var responseStatusCode = response.StatusCode;
        //Console.WriteLine($"status code: {responseStatusCode}");
        //Console.WriteLine(response);
        //Console.WriteLine(response.RequestMessage);
        //Console.WriteLine(";-------content: ");
        //Console.WriteLine(await requestMessage.Content.ReadAsStringAsync());
        //Console.WriteLine("--------");
        //Console.WriteLine(response.Content.ReadAsStream);
        // READ ERRORS: THANKS CHATGPT
        //using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
        //{
        //    string responseContent = await streamReader.ReadToEndAsync();
        //    // Do something with the response content
        //    Console.WriteLine(responseContent);
        //}

        //Console.WriteLine(JsonSerializer.Deserialize<System.Net.Http.HttpConnectionResponseContent>(response.Content));
        @* try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0*@
        //try
        //{
        //    using HttpResponseMessage response = await Http.GetAsync("");
        //    response.EnsureSuccessStatusCode(); // exception if not success code
        //    string responseBody = await response.Content.ReadAsStringAsync();
        //    Console.WriteLine(responseBody);
        //} catch (HttpRequestException e)
        //{
        //    Console.WriteLine("message :{0} ", e.Message);
        //}

        //someData = await Http.GetFromJsonAsync("")
        //var content = await response.Content.ReadFromJsonAsync();
        StateHasChanged();
    }
    private async Task OnValidSignUp(EditContext context)
    {
        await signUp();
    }




    LoginForm loginForm = new LoginForm();

    public class LoginForm
    {
        [Required]
        public string ApiKey { get; set; }
    }

    private async Task Login()
    {

        // submit request to server with api key
        // try/catch adapted from https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient?view=net-7.0
        // adapted from https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?pivots=webassembly&view=aspnetcore-7.0
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("GET"),
            RequestUri = new Uri(Http.BaseAddress.ToString() + "user/auth/login"),
        };
        requestMessage.Headers.Authorization = new AuthenticationHeaderValue(loginForm.ApiKey);
        var response = await Http.SendAsync(requestMessage);
        try
        {
            response.EnsureSuccessStatusCode(); // exception if not success code
            string responseInfoString = await response.Content.ReadAsStringAsync();
            var responseInfo = JObject.Parse(responseInfoString);
            Console.WriteLine(responseInfo);
            UserState.is_logged_in = true;
            UserState.id = (int)responseInfo["id"];
            UserState.first_name = (string)responseInfo["first_name"];
            UserState.last_name = (string)responseInfo["last_name"];
            UserState.email_address = (string)responseInfo["email_address"];
            UserState.apiKey = (string)responseInfo["apiKey"];
            UserState.is_admin = (bool)responseInfo["is_admin"];
            UserState.created_at = (DateTime)responseInfo["created_at"];
            UserState.portfolio = (int)responseInfo["portfolio"];
        }
        catch (HttpRequestException e)
        {
            //READ ERRORS: THANKS CHATGPT
            using (var streamReader = new StreamReader(await response.Content.ReadAsStreamAsync()))
            {
                string responseContent = await streamReader.ReadToEndAsync();
                Console.WriteLine(responseContent);
            }
            Console.WriteLine("message :{0} ", e.Message);
        }
    }

    private async Task OnValidLogIn(EditContext context)
    {
        await Login();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        return;
    }

    public void LogOut()
    {
        UserState.is_logged_in = false;
        StateHasChanged();
    }
}
